#  Smart Precision Irrigation Project
# Includes: Data Cleaning, Preprocessing, Visualization, Basic Analysis

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler

# -------------------
# 1. Load & Inspect Data
# -------------------
def load_data(file_path):
    df = pd.read_csv(file_path)
    print("Initial Data Shape:", df.shape)
    print("Columns:", df.columns.tolist())
    print(df.head())
    return df

# -------------------
# 2. Clean & Preprocess
# -------------------
def clean_and_preprocess(df):
    # Standardize column names
    df.columns = (
        df.columns.str.strip()
        .str.replace(" ", "_")
        .str.replace(r"\[.*?\]", "", regex=True)
    )

    # Convert timestamp if exists
    if "timestamp" in df.columns:
        df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
        df = df.dropna(subset=["timestamp"])
        df = df.sort_values("timestamp")

    # Handle missing values
    df.fillna(method="ffill", inplace=True)
    df.fillna(method="bfill", inplace=True)

    # Remove duplicates
    df.drop_duplicates(inplace=True)

    # Clean ranges (example: soil moisture 0-100, humidity 0-100)
    if "Soil_Moisture" in df.columns:
        df = df[(df["Soil_Moisture"] >= 0) & (df["Soil_Moisture"] <= 100)]
    if "Humidity" in df.columns:
        df = df[(df["Humidity"] >= 0) & (df["Humidity"] <= 100)]
    if "Temperature" in df.columns:
        df = df[(df["Temperature"] > -10) & (df["Temperature"] < 60)]

    # One-hot encode crop coefficient stage if present
    if "Crop_Coefficient_stage" in df.columns:
        df = pd.get_dummies(df, columns=["Crop_Coefficient_stage"], prefix="Stage")

    return df

# -------------------
# 3. Normalize Data (optional for ML)
# -------------------
def normalize_data(df):
    scaler = MinMaxScaler()
    num_cols = df.select_dtypes(include=[np.number]).columns
    df[num_cols] = scaler.fit_transform(df[num_cols])
    return df

# -------------------
# 4. Visualization
# -------------------
def visualize_data(df):
    # Soil Moisture Trend
    if "timestamp" in df.columns and "Soil_Moisture" in df.columns:
        plt.figure(figsize=(12,5))
        plt.plot(df["timestamp"], df["Soil_Moisture"], label="Soil Moisture (%)")
        plt.xlabel("Time")
        plt.ylabel("Soil Moisture (%)")
        plt.title("Soil Moisture Over Time")
        plt.legend()
        plt.show()

    # Correlation Heatmap
    plt.figure(figsize=(10,6))
    sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
    plt.title("Correlation Between Parameters")
    plt.show()

# -------------------
# 5. Save Cleaned Data
# -------------------
def save_cleaned_data(df, output_path):
    df.to_csv(output_path, index=False)
    print(f"âœ… Cleaned dataset saved to {output_path}")

# -------------------
# MAIN
# -------------------
if __name__ == "__main__":
    input_file = "tomato_irrigation_dataset.csv"   # your uploaded dataset
    output_file = "cleaned_tomato_irrigation_dataset.csv"

    df = load_data(input_file)
    df_clean = clean_and_preprocess(df)
    df_norm = normalize_data(df_clean)
    visualize_data(df_norm)
    save_cleaned_data(df_norm, output_file)
